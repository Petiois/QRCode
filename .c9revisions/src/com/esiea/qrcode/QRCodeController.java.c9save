{"ts":1348485585775,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.esiea.qrcode;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport android.graphics.drawable.BitmapDrawable;\nimport android.provider.MediaStore;\nimport android.util.Log;\nimport com.google.zxing.BinaryBitmap;\nimport com.google.zxing.ChecksumException;\nimport com.google.zxing.FormatException;\nimport com.google.zxing.NotFoundException;\nimport com.google.zxing.Result;\nimport com.google.zxing.client.android.RGBLuminance;\nimport com.google.zxing.common.GlobalHistogramBinarizer;\nimport com.google.zxing.qrcode.QRCodeReader;\nimport java.util.Calendar;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n *\n * @author Petiois\n */\npublic class QRCodeController implements IQRCodeController\n{\n\n    private QRcodeModel qrcModel;\n    private QRCodeView qrView;\n    private static QRCodeController qrController = null;\n\n    private QRCodeController(QRCodeView in)\n    {\n        this.qrView=in;\n        qrcModel = new QRcodeModel();\n    }\n\n    public Bitmap updateQRCode(String data,String Hiddendata)\n    {\n        qrcModel.setData(data);\n        return qrcModel.generateBitmap();\n    }\n\n    public void generateAndDisplayQRcode()\n    {\n        String data = qrView.getData();\n        String hiddenData = qrView.getHiddenData();\n        if (\"\".equals(data))\n        {\n            this.qrView.showMessage(\"Veuillez entrer des donnes !\");\n        }\n        else if (4*hiddenData.length()>data.length())\n        {\n            this.qrView.showMessage(\"Le QRcode ne peut pas contenir toutes les données cachées, veuillez réduire la taille de ces données\");\n        }\n        else\n        {\n            this.qrcModel.setData(data);\n            this.qrcModel.setHiddenData(hiddenData);\n            Bitmap generateBitmap = this.qrcModel.generateBitmap();\n            this.qrView.Update(new BitmapDrawable(generateBitmap));\n        }\n    }\n\n    public void savePicture()\n    {\n        try\n        {\n            Bitmap bit = qrcModel.getBitmap();\n            Activity activity = qrView.getActivity();\n            Calendar c = Calendar.getInstance();\n\n            int seconds = c.get(Calendar.SECOND);\n            int minutes = c.get(Calendar.MINUTE);\n            int hour = c.get(Calendar.HOUR);\n            int day = c.get(Calendar.DAY_OF_MONTH);\n            int month = c.get(Calendar.MONTH);\n            int year = c.get(Calendar.YEAR);\n\n            String timeStamp =\n                Integer.toString(year) + \"-\" + Integer.toString(month)   +\"-\" + Integer.toString(day) + \"_\" +\n                Integer.toString(hour) + \":\" + Integer.toString(minutes) +\":\" + Integer.toString(seconds);\n            String url = MediaStore.Images.Media.insertImage(activity.getContentResolver(), bit, \"QRCode\" + timeStamp, \"Qr code auto-generated\");\n        }\n        catch (Exception ex)\n        {\n            Logger.getLogger(QRCodeController.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n\n    public void analyseImage(Bitmap yourSelectedImage)\n    {\n        com.google.zxing.qrcode.encoder.DataInQRCode.emptyHiddenDataEmmbeddedInQRCode();\n        RGBLuminance source = new RGBLuminance(yourSelectedImage);\n        GlobalHistogramBinarizer binarizer = new GlobalHistogramBinarizer(source);\n        BinaryBitmap bb = new BinaryBitmap(binarizer);\n        try\n        {\n            QRCodeReader codeReader = new QRCodeReader();\n            Result result = codeReader.decode(bb);\n            String showedData = result.toString();\n            String hiddenData = com.google.zxing.qrcode.encoder.DataInQRCode.getHiddenDataEmmbeddedInQRCode();\n            this.qrView.showMessage(\"Données claire : \"+showedData+\"\\n\\n\"+\"Données cryptées : \"+hiddenData);\n        }\n\n        catch (NotFoundException ex)\n        {\n            this.qrView.showMessage(\"Aucun QRcode trouvé\");\n            Log.w(\"Notfound\",\"une execption est survenue \"+ ex.toString());\n        }\n        catch (ChecksumException ex)\n        {\n            this.qrView.showMessage(\"QRcode détecté mais non valide\");\n            Log.w(\"Checksum\",\"une execption est survenue \"+ ex.toString());\n        }\n        catch (FormatException ex)\n        {\n            this.qrView.showMessage(\"Problème de format de QRcode\");\n            Log.w(\"FormatEx\",\"une execption est survenue \"+ ex.toString());\n        }\n         catch (Exception ex)\n        {\n            this.qrView.showMessage(\"Une erreur inconnue est survenue\");\n            Log.w(\"OtherEx\",\"une execption est survenue \"+ ex.toString());\n        }\n    }\n\n    public void askForUpdate() \n    {\n        Bitmap bit = this.qrcModel.getBitmap();\n        if(bit!=null)\n        {\n            this.qrView.Update(new BitmapDrawable(bit));\n        }\n        \n    }\n\n    public static QRCodeController getController(QRCodeView in) \n    {\n        if(qrController==null)\n        {\n            qrController = new QRCodeController(in);\n        }\n       return qrController; \n    }\n\n    public void setActiveView(QRCodeView qrcvodeView) \n    {\n        this.qrView = qrcvodeView;\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":5107}]],"length":5107}
{"contributors":[],"silentsave":false,"ts":1348485656071,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"    \n        public void destroyController()\n    {\n        qrController = null;\n    }\n"],[0,"}\n"]],"start1":5097,"start2":5097,"length1":10,"length2":96}]],"length":5193,"saved":false}
